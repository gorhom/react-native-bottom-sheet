{"version":3,"sources":["BottomSheetGestureHandlersProvider.tsx"],"names":["BottomSheetGestureHandlersProvider","gestureEventsHandlersHook","useGestureEventsHandlers","useGestureEventsHandlersDefault","children","animatedGestureSource","GESTURE_SOURCE","UNDETERMINED","animatedContentGestureState","animatedHandleGestureState","handleOnStart","handleOnActive","handleOnEnd","contentPanGestureHandler","CONTENT","scrollablePanGestureHandler","SCROLLABLE","handlePanGestureHandler","HANDLE","contextValue"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAKA;;AAEA;;;;;;AAEA,MAAMA,kCAAkC,GAAG,CAAC;AAC1CC,EAAAA,yBAAyB,EACvBC,wBAAwB,GAAGC,sCAFa;AAG1CC,EAAAA;AAH0C,CAAD,KAII;AAC7C;AACA,QAAMC,qBAAqB,GAAG,2CAC5BC,0BAAeC,YADa,CAA9B,CAF6C,CAK7C;AAEA;;AACA,QAAM;AAAEC,IAAAA,2BAAF;AAA+BC,IAAAA;AAA/B,MACJ,oCADF;AAEA,QAAM;AAAEC,IAAAA,aAAF;AAAiBC,IAAAA,cAAjB;AAAiCC,IAAAA;AAAjC,MACJV,wBAAwB,EAD1B,CAV6C,CAY7C;AAEA;;AACA,QAAMW,wBAAwB,GAAG,8BAC/BP,0BAAeQ,OADgB,EAE/BN,2BAF+B,EAG/BH,qBAH+B,EAI/BK,aAJ+B,EAK/BC,cAL+B,EAM/BC,WAN+B,CAAjC;AASA,QAAMG,2BAA2B,GAAG,8BAClCT,0BAAeU,UADmB,EAElCR,2BAFkC,EAGlCH,qBAHkC,EAIlCK,aAJkC,EAKlCC,cALkC,EAMlCC,WANkC,CAApC;AASA,QAAMK,uBAAuB,GAAG,8BAC9BX,0BAAeY,MADe,EAE9BT,0BAF8B,EAG9BJ,qBAH8B,EAI9BK,aAJ8B,EAK9BC,cAL8B,EAM9BC,WAN8B,CAAhC,CAjC6C,CAyC7C;AAEA;;AACA,QAAMO,YAAY,GAAG,oBACnB,OAAO;AACLN,IAAAA,wBADK;AAELI,IAAAA,uBAFK;AAGLF,IAAAA,2BAHK;AAILV,IAAAA;AAJK,GAAP,CADmB,EAOnB,CACEQ,wBADF,EAEEI,uBAFF,EAGEF,2BAHF,EAIEV,qBAJF,CAPmB,CAArB,CA5C6C,CA0D7C;;AACA,sBACE,6BAAC,2CAAD,CAAmC,QAAnC;AAA4C,IAAA,KAAK,EAAEc;AAAnD,KACGf,QADH,CADF;AAKD,CApED;;eAsEeJ,kC","sourcesContent":["import React, { useMemo } from 'react';\nimport { GESTURE_SOURCE } from '../../constants';\nimport {\n  useGestureHandler,\n  useBottomSheetInternal,\n  useGestureEventsHandlersDefault,\n} from '../../hooks';\nimport { BottomSheetGestureHandlersContext } from '../../contexts';\nimport type { BottomSheetGestureHandlersProviderProps } from './types';\nimport { useSharedValue } from 'react-native-reanimated';\n\nconst BottomSheetGestureHandlersProvider = ({\n  gestureEventsHandlersHook:\n    useGestureEventsHandlers = useGestureEventsHandlersDefault,\n  children,\n}: BottomSheetGestureHandlersProviderProps) => {\n  //#region variables\n  const animatedGestureSource = useSharedValue<GESTURE_SOURCE>(\n    GESTURE_SOURCE.UNDETERMINED\n  );\n  //#endregion\n\n  //#region hooks\n  const { animatedContentGestureState, animatedHandleGestureState } =\n    useBottomSheetInternal();\n  const { handleOnStart, handleOnActive, handleOnEnd } =\n    useGestureEventsHandlers();\n  //#endregion\n\n  //#region gestures\n  const contentPanGestureHandler = useGestureHandler(\n    GESTURE_SOURCE.CONTENT,\n    animatedContentGestureState,\n    animatedGestureSource,\n    handleOnStart,\n    handleOnActive,\n    handleOnEnd\n  );\n\n  const scrollablePanGestureHandler = useGestureHandler(\n    GESTURE_SOURCE.SCROLLABLE,\n    animatedContentGestureState,\n    animatedGestureSource,\n    handleOnStart,\n    handleOnActive,\n    handleOnEnd\n  );\n\n  const handlePanGestureHandler = useGestureHandler(\n    GESTURE_SOURCE.HANDLE,\n    animatedHandleGestureState,\n    animatedGestureSource,\n    handleOnStart,\n    handleOnActive,\n    handleOnEnd\n  );\n  //#endregion\n\n  //#region context\n  const contextValue = useMemo(\n    () => ({\n      contentPanGestureHandler,\n      handlePanGestureHandler,\n      scrollablePanGestureHandler,\n      animatedGestureSource,\n    }),\n    [\n      contentPanGestureHandler,\n      handlePanGestureHandler,\n      scrollablePanGestureHandler,\n      animatedGestureSource,\n    ]\n  );\n  //#endregion\n  return (\n    <BottomSheetGestureHandlersContext.Provider value={contextValue}>\n      {children}\n    </BottomSheetGestureHandlersContext.Provider>\n  );\n};\n\nexport default BottomSheetGestureHandlersProvider;\n"]}