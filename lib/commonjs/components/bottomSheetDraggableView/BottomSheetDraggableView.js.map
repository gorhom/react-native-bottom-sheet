{"version":3,"sources":["BottomSheetDraggableView.tsx"],"names":["BottomSheetDraggableViewComponent","gestureType","GESTURE_SOURCE","CONTENT","nativeGestureRef","refreshControlGestureRef","style","children","rest","enableContentPanningGesture","simultaneousHandlers","_providedSimultaneousHandlers","waitFor","activeOffsetX","activeOffsetY","failOffsetX","failOffsetY","contentPanGestureHandler","scrollablePanGestureHandler","panGestureRef","gestureHandler","refs","push","Array","isArray","BottomSheetDraggableView","displayName"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AAIA;;;;;;;;;;AAGA,MAAMA,iCAAiC,GAAG,CAAC;AACzCC,EAAAA,WAAW,GAAGC,0BAAeC,OADY;AAEzCC,EAAAA,gBAFyC;AAGzCC,EAAAA,wBAHyC;AAIzCC,EAAAA,KAJyC;AAKzCC,EAAAA,QALyC;AAMzC,KAAGC;AANsC,CAAD,KAOL;AACnC;AACA,QAAM;AACJC,IAAAA,2BADI;AAEJC,IAAAA,oBAAoB,EAAEC,6BAFlB;AAGJC,IAAAA,OAHI;AAIJC,IAAAA,aAJI;AAKJC,IAAAA,aALI;AAMJC,IAAAA,WANI;AAOJC,IAAAA;AAPI,MAQF,oCARJ;AASA,QAAM;AAAEC,IAAAA,wBAAF;AAA4BC,IAAAA;AAA5B,MACJ,2CADF,CAXmC,CAanC;AAEA;;AACA,QAAMC,aAAa,GAAG,mBAA0B,IAA1B,CAAtB;AACA,QAAMC,cAAc,GAAG,oBACrB,MACEnB,WAAW,KAAKC,0BAAeC,OAA/B,GACIc,wBADJ,GAEIC,2BAJe,EAKrB,CAACjB,WAAD,EAAcgB,wBAAd,EAAwCC,2BAAxC,CALqB,CAAvB;AAOA,QAAMR,oBAAoB,GAAG,oBAAQ,MAAM;AACzC,UAAMW,IAAI,GAAG,EAAb;;AAEA,QAAIjB,gBAAJ,EAAsB;AACpBiB,MAAAA,IAAI,CAACC,IAAL,CAAUlB,gBAAV;AACD;;AAED,QAAIC,wBAAJ,EAA8B;AAC5BgB,MAAAA,IAAI,CAACC,IAAL,CAAUjB,wBAAV;AACD;;AAED,QAAIM,6BAAJ,EAAmC;AACjC,UAAIY,KAAK,CAACC,OAAN,CAAcb,6BAAd,CAAJ,EAAkD;AAChDU,QAAAA,IAAI,CAACC,IAAL,CAAU,GAAGX,6BAAb;AACD,OAFD,MAEO;AACLU,QAAAA,IAAI,CAACC,IAAL,CAAUX,6BAAV;AACD;AACF;;AAED,WAAOU,IAAP;AACD,GApB4B,EAoB1B,CACDV,6BADC,EAEDP,gBAFC,EAGDC,wBAHC,CApB0B,CAA7B,CAxBmC,CAiDnC;;AAEA,sBACE,6BAAC,4CAAD;AACE,IAAA,GAAG,EAAEc,aADP;AAEE,IAAA,OAAO,EAAEV,2BAFX;AAGE,IAAA,oBAAoB,EAAEC,oBAHxB;AAIE,IAAA,uBAAuB,EAAE,KAJ3B;AAKE,IAAA,OAAO,EAAEE,OALX;AAME,IAAA,cAAc,EAAEQ,cANlB;AAOE,IAAA,aAAa,EAAEP,aAPjB;AAQE,IAAA,aAAa,EAAEC,aARjB;AASE,IAAA,WAAW,EAAEC,WATf;AAUE,IAAA,WAAW,EAAEC;AAVf,kBAYE,6BAAC,8BAAD,CAAU,IAAV;AAAe,IAAA,KAAK,EAAEV;AAAtB,KAAiCE,IAAjC,GACGD,QADH,CAZF,CADF;AAkBD,CA5ED;;AA8EA,MAAMkB,wBAAwB,gBAAG,iBAAKzB,iCAAL,CAAjC;AACAyB,wBAAwB,CAACC,WAAzB,GAAuC,0BAAvC;eAEeD,wB","sourcesContent":["import React, { useMemo, useRef, memo } from 'react';\nimport Animated from 'react-native-reanimated';\nimport { PanGestureHandler } from 'react-native-gesture-handler';\nimport {\n  useBottomSheetGestureHandlers,\n  useBottomSheetInternal,\n} from '../../hooks';\nimport { GESTURE_SOURCE } from '../../constants';\nimport type { BottomSheetDraggableViewProps } from './types';\n\nconst BottomSheetDraggableViewComponent = ({\n  gestureType = GESTURE_SOURCE.CONTENT,\n  nativeGestureRef,\n  refreshControlGestureRef,\n  style,\n  children,\n  ...rest\n}: BottomSheetDraggableViewProps) => {\n  //#region hooks\n  const {\n    enableContentPanningGesture,\n    simultaneousHandlers: _providedSimultaneousHandlers,\n    waitFor,\n    activeOffsetX,\n    activeOffsetY,\n    failOffsetX,\n    failOffsetY,\n  } = useBottomSheetInternal();\n  const { contentPanGestureHandler, scrollablePanGestureHandler } =\n    useBottomSheetGestureHandlers();\n  //#endregion\n\n  //#region variables\n  const panGestureRef = useRef<PanGestureHandler>(null);\n  const gestureHandler = useMemo(\n    () =>\n      gestureType === GESTURE_SOURCE.CONTENT\n        ? contentPanGestureHandler\n        : scrollablePanGestureHandler,\n    [gestureType, contentPanGestureHandler, scrollablePanGestureHandler]\n  );\n  const simultaneousHandlers = useMemo(() => {\n    const refs = [];\n\n    if (nativeGestureRef) {\n      refs.push(nativeGestureRef);\n    }\n\n    if (refreshControlGestureRef) {\n      refs.push(refreshControlGestureRef);\n    }\n\n    if (_providedSimultaneousHandlers) {\n      if (Array.isArray(_providedSimultaneousHandlers)) {\n        refs.push(..._providedSimultaneousHandlers);\n      } else {\n        refs.push(_providedSimultaneousHandlers);\n      }\n    }\n\n    return refs;\n  }, [\n    _providedSimultaneousHandlers,\n    nativeGestureRef,\n    refreshControlGestureRef,\n  ]);\n  //#endregion\n\n  return (\n    <PanGestureHandler\n      ref={panGestureRef}\n      enabled={enableContentPanningGesture}\n      simultaneousHandlers={simultaneousHandlers}\n      shouldCancelWhenOutside={false}\n      waitFor={waitFor}\n      onGestureEvent={gestureHandler}\n      activeOffsetX={activeOffsetX}\n      activeOffsetY={activeOffsetY}\n      failOffsetX={failOffsetX}\n      failOffsetY={failOffsetY}\n    >\n      <Animated.View style={style} {...rest}>\n        {children}\n      </Animated.View>\n    </PanGestureHandler>\n  );\n};\n\nconst BottomSheetDraggableView = memo(BottomSheetDraggableViewComponent);\nBottomSheetDraggableView.displayName = 'BottomSheetDraggableView';\n\nexport default BottomSheetDraggableView;\n"]}