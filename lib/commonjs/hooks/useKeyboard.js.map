{"version":3,"sources":["useKeyboard.ts"],"names":["KEYBOARD_EVENT_MAPPER","KEYBOARD_SHOW","Platform","select","ios","android","default","KEYBOARD_HIDE","useKeyboard","shouldHandleKeyboardEvents","keyboardState","KEYBOARD_STATE","UNDETERMINED","keyboardHeight","keyboardAnimationEasing","keyboardAnimationDuration","temporaryCachedKeyboardEvent","handleKeyboardEvent","state","height","duration","easing","SHOWN","value","handleOnKeyboardShow","event","endCoordinates","handleOnKeyboardHide","HIDDEN","showSubscription","Keyboard","addListener","hideSubscription","remove","result","params","length","animationEasing","animationDuration"],"mappings":"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","sourcesContent":["import { useEffect } from 'react';\nimport {\n  Keyboard,\n  KeyboardEvent,\n  KeyboardEventEasing,\n  KeyboardEventName,\n  Platform,\n} from 'react-native';\nimport {\n  runOnUI,\n  useAnimatedReaction,\n  useSharedValue,\n  useWorkletCallback,\n} from 'react-native-reanimated';\nimport { KEYBOARD_STATE } from '../constants';\n\nconst KEYBOARD_EVENT_MAPPER = {\n  KEYBOARD_SHOW: Platform.select({\n    ios: 'keyboardWillShow',\n    android: 'keyboardDidShow',\n    default: '',\n  }) as KeyboardEventName,\n  KEYBOARD_HIDE: Platform.select({\n    ios: 'keyboardWillHide',\n    android: 'keyboardDidHide',\n    default: '',\n  }) as KeyboardEventName,\n};\n\nexport const useKeyboard = () => {\n  //#region variables\n  const shouldHandleKeyboardEvents = useSharedValue(false);\n  const keyboardState = useSharedValue<KEYBOARD_STATE>(\n    KEYBOARD_STATE.UNDETERMINED\n  );\n  const keyboardHeight = useSharedValue(0);\n  const keyboardAnimationEasing =\n    useSharedValue<KeyboardEventEasing>('keyboard');\n  const keyboardAnimationDuration = useSharedValue(500);\n  const temporaryCachedKeyboardEvent = useSharedValue<any>([]);\n  //#endregion\n\n  //#region worklets\n  const handleKeyboardEvent = useWorkletCallback(\n    (state, height, duration, easing) => {\n      if (state === KEYBOARD_STATE.SHOWN && !shouldHandleKeyboardEvents.value) {\n        /**\n         * if the keyboard event was fired before the `onFocus` on TextInput,\n         * then we cache the input, and wait till the `shouldHandleKeyboardEvents`\n         * to be updated then fire this function again.\n         */\n        temporaryCachedKeyboardEvent.value = [state, height, duration, easing];\n        return;\n      }\n      keyboardHeight.value =\n        state === KEYBOARD_STATE.SHOWN\n          ? height\n          : height === 0\n          ? keyboardHeight.value\n          : height;\n      keyboardAnimationDuration.value = duration;\n      keyboardAnimationEasing.value = easing;\n      keyboardState.value = state;\n      temporaryCachedKeyboardEvent.value = [];\n    },\n    []\n  );\n  //#endregion\n\n  //#region effects\n  useEffect(() => {\n    const handleOnKeyboardShow = (event: KeyboardEvent) => {\n      runOnUI(handleKeyboardEvent)(\n        KEYBOARD_STATE.SHOWN,\n        event.endCoordinates.height,\n        event.duration,\n        event.easing\n      );\n    };\n    const handleOnKeyboardHide = (event: KeyboardEvent) => {\n      runOnUI(handleKeyboardEvent)(\n        KEYBOARD_STATE.HIDDEN,\n        event.endCoordinates.height,\n        event.duration,\n        event.easing\n      );\n    };\n\n    const showSubscription = Keyboard.addListener(\n      KEYBOARD_EVENT_MAPPER.KEYBOARD_SHOW,\n      handleOnKeyboardShow\n    );\n\n    const hideSubscription = Keyboard.addListener(\n      KEYBOARD_EVENT_MAPPER.KEYBOARD_HIDE,\n      handleOnKeyboardHide\n    );\n\n    return () => {\n      showSubscription.remove();\n      hideSubscription.remove();\n    };\n  }, [handleKeyboardEvent]);\n\n  /**\n   * This reaction is needed to handle the issue with multiline text input.\n   *\n   * @link https://github.com/gorhom/react-native-bottom-sheet/issues/411\n   */\n  useAnimatedReaction(\n    () => shouldHandleKeyboardEvents.value,\n    result => {\n      const params = temporaryCachedKeyboardEvent.value;\n      if (result && params.length > 0) {\n        handleKeyboardEvent(params[0], params[1], params[2], params[3]);\n      }\n    }\n  );\n  //#endregion\n\n  return {\n    state: keyboardState,\n    height: keyboardHeight,\n    animationEasing: keyboardAnimationEasing,\n    animationDuration: keyboardAnimationDuration,\n    shouldHandleKeyboardEvents,\n  };\n};\n"]}