{"version":3,"sources":["useReactiveSharedValue.ts"],"names":["useReactiveSharedValue","value","initialValueRef","valueRef","current"],"mappings":";;;;;;;AAAA;;AACA;;AAMO,MAAMA,sBAAsB,GACjCC,KADoC,IAEkB;AAAA;;AACtD,QAAMC,eAAe,GAAG,mBAAU,IAAV,CAAxB;AACA,QAAMC,QAAQ,GAAG,mBAAgC,IAAhC,CAAjB;;AAEA,MAAIF,KAAK,IAAI,OAAOA,KAAP,KAAiB,QAA1B,IAAsC,WAAWA,KAArD,EAA4D;AAC1D;AACJ;AACA;AACA;AACG,GALD,MAKO,IAAIE,QAAQ,CAACC,OAAT,KAAqB,IAAzB,EAA+B;AACpC;AACAF,IAAAA,eAAe,CAACE,OAAhB,GAA0BH,KAA1B;AACA;AACJ;AACA;AACA;;AACI,QAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7B;AACAE,MAAAA,QAAQ,CAACC,OAAT,GAAmB,wCAAY,EAAE,GAAGH;AAAL,OAAZ,CAAnB;AACD,KAHD,MAGO;AACL;AACAE,MAAAA,QAAQ,CAACC,OAAT,GAAmB,wCAAYH,KAAZ,CAAnB;AACD;AACF,GAdM,MAcA,IAAIC,eAAe,CAACE,OAAhB,KAA4BH,KAAhC,EAAuC;AAC5CE,IAAAA,QAAQ,CAACC,OAAT,CAAiBH,KAAjB,GAAyBA,KAAzB;AACD;;AAED,wBAAU,MAAM;AACd,WAAO,MAAM;AACX,UAAIE,QAAQ,CAACC,OAAb,EAAsB;AACpB,oDAAgBD,QAAQ,CAACC,OAAzB;AACD;AACF,KAJD;AAKD,GAND,EAMG,EANH,EA3BsD,CAmCtD;;AACA,8BAAOD,QAAQ,CAACC,OAAhB,iEAA2BH,KAA3B;AACD,CAvCM","sourcesContent":["import { useEffect, useRef } from 'react';\nimport Animated, {\n  cancelAnimation,\n  makeMutable,\n} from 'react-native-reanimated';\nimport type { Primitive } from '../types';\n\nexport const useReactiveSharedValue = <T>(\n  value: T\n): T extends Primitive ? Animated.SharedValue<T> : T => {\n  const initialValueRef = useRef<T>(null);\n  const valueRef = useRef<Animated.SharedValue<T>>(null);\n\n  if (value && typeof value === 'object' && 'value' in value) {\n    /**\n     * if provided value is a shared value,\n     * then we do not initialize another one.\n     */\n  } else if (valueRef.current === null) {\n    // @ts-ignore\n    initialValueRef.current = value;\n    /**\n     * if value is an object, then we need to\n     * pass a clone.\n     */\n    if (typeof value === 'object') {\n      // @ts-ignore\n      valueRef.current = makeMutable({ ...value });\n    } else {\n      // @ts-ignore\n      valueRef.current = makeMutable(value);\n    }\n  } else if (initialValueRef.current !== value) {\n    valueRef.current.value = value as T;\n  }\n\n  useEffect(() => {\n    return () => {\n      if (valueRef.current) {\n        cancelAnimation(valueRef.current);\n      }\n    };\n  }, []);\n\n  // @ts-ignore\n  return valueRef.current ?? value;\n};\n"]}