{"version":3,"sources":["useBottomSheetDynamicSnapPoints.ts"],"names":["useBottomSheetDynamicSnapPoints","initialSnapPoints","animatedContentHeight","animatedHandleHeight","INITIAL_HANDLE_HEIGHT","animatedSnapPoints","value","map","INITIAL_SNAP_POINT","contentWithHandleHeight","snapPoint","handleContentLayout","nativeEvent","layout","height","console","warn"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMA,+BAA+B,GAC1CC,iBAD6C,IAE1C;AACH;AACA,QAAMC,qBAAqB,GAAG,2CAAe,CAAf,CAA9B;AACA,QAAMC,oBAAoB,GAAG,2CAAeC,gCAAf,CAA7B;AACA,QAAMC,kBAAkB,GAAG,4CAAgB,MAAM;AAC/C,QACEF,oBAAoB,CAACG,KAArB,KAA+BF,gCAA/B,IACAF,qBAAqB,CAACI,KAAtB,KAAgC,CAFlC,EAGE;AACA,aAAOL,iBAAiB,CAACM,GAAlB,CAAsB,MAAMC,6BAA5B,CAAP;AACD;;AACD,UAAMC,uBAAuB,GAC3BP,qBAAqB,CAACI,KAAtB,GAA8BH,oBAAoB,CAACG,KADrD;AAGA,WAAOL,iBAAiB,CAACM,GAAlB,CAAsBG,SAAS,IACpCA,SAAS,KAAK,gBAAd,GAAiCD,uBAAjC,GAA2DC,SADtD,CAAP;AAGD,GAb0B,EAaxB,EAbwB,CAA3B;AAoBA;AACA,QAAMC,mBAAmB,GAAG,wBAC1B,CAAC;AACCC,IAAAA,WAAW,EAAE;AACXC,MAAAA,MAAM,EAAE;AAAEC,QAAAA;AAAF;AADG;AADd,GAAD,KAIgC;AAC9BZ,IAAAA,qBAAqB,CAACI,KAAtB,GAA8BQ,MAA9B;AACD,GAPyB,EAQ1B,CAACZ,qBAAD,CAR0B,CAA5B,CAzBG,CAoCH;;AACA,wBAAU,MAAM;AACda,IAAAA,OAAO,CAACC,IAAR,CACE,0IADF;AAGD,GAJD,EAIG,EAJH,EArCG,CA0CH;;AACA,SAAO;AACLX,IAAAA,kBADK;AAELF,IAAAA,oBAFK;AAGLD,IAAAA,qBAHK;AAILS,IAAAA;AAJK,GAAP;AAMD,CAnDM","sourcesContent":["import { useCallback, useEffect } from 'react';\nimport { useDerivedValue, useSharedValue } from 'react-native-reanimated';\nimport {\n  INITIAL_HANDLE_HEIGHT,\n  INITIAL_SNAP_POINT,\n} from '../components/bottomSheet/constants';\n\n/**\n * Provides dynamic content height calculating functionalities, by\n * replacing the placeholder `CONTENT_HEIGHT` with calculated layout.\n * @example\n * [0, 'CONTENT_HEIGHT', '100%']\n * @param initialSnapPoints your snap point with content height placeholder.\n * @returns {\n *  - animatedSnapPoints: an animated snap points to be set on `BottomSheet` or `BottomSheetModal`.\n *  - animatedHandleHeight: an animated handle height callback node to be set on `BottomSheet` or `BottomSheetModal`.\n *  - animatedContentHeight: an animated content height callback node to be set on `BottomSheet` or `BottomSheetModal`.\n *  - handleContentLayout: a `onLayout` callback method to be set on `BottomSheetView` component.\n * }\n * @deprecated will be deprecated in the next major release! please use the new introduce prop `enableDynamicSizing`.\n */\nexport const useBottomSheetDynamicSnapPoints = (\n  initialSnapPoints: Array<string | number>\n) => {\n  // variables\n  const animatedContentHeight = useSharedValue(0);\n  const animatedHandleHeight = useSharedValue(INITIAL_HANDLE_HEIGHT);\n  const animatedSnapPoints = useDerivedValue(() => {\n    if (\n      animatedHandleHeight.value === INITIAL_HANDLE_HEIGHT ||\n      animatedContentHeight.value === 0\n    ) {\n      return initialSnapPoints.map(() => INITIAL_SNAP_POINT);\n    }\n    const contentWithHandleHeight =\n      animatedContentHeight.value + animatedHandleHeight.value;\n\n    return initialSnapPoints.map(snapPoint =>\n      snapPoint === 'CONTENT_HEIGHT' ? contentWithHandleHeight : snapPoint\n    );\n  }, []);\n\n  type HandleContentLayoutProps = {\n    nativeEvent: {\n      layout: { height: number };\n    };\n  };\n  // callbacks\n  const handleContentLayout = useCallback(\n    ({\n      nativeEvent: {\n        layout: { height },\n      },\n    }: HandleContentLayoutProps) => {\n      animatedContentHeight.value = height;\n    },\n    [animatedContentHeight]\n  );\n\n  //#region effects\n  useEffect(() => {\n    console.warn(\n      '`useBottomSheetDynamicSnapPoints` will be deprecated in the next major release! please use the new introduce prop `enableDynamicSizing`.'\n    );\n  }, []);\n  //#endregion\n  return {\n    animatedSnapPoints,\n    animatedHandleHeight,\n    animatedContentHeight,\n    handleContentLayout,\n  };\n};\n"]}