{"version":3,"sources":["useScrollable.ts"],"names":["useScrollable","scrollableRef","previousScrollableRef","animatedScrollableType","SCROLLABLE_TYPE","UNDETERMINED","animatedScrollableContentOffsetY","animatedScrollableOverrideState","SCROLLABLE_STATE","isScrollableRefreshable","setScrollableRef","ref","currentRefId","current","id","removeScrollableRef"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AAGO,MAAMA,aAAa,GAAG,MAAM;AACjC;AACA,QAAMC,aAAa,GAAG,mBAAsB,IAAtB,CAAtB;AACA,QAAMC,qBAAqB,GAAG,mBAAsB,IAAtB,CAA9B,CAHiC,CAKjC;;AACA,QAAMC,sBAAsB,GAAG,2CAC7BC,2BAAgBC,YADa,CAA/B;AAGA,QAAMC,gCAAgC,GAAG,2CAAuB,CAAvB,CAAzC;AACA,QAAMC,+BAA+B,GAAG,2CACtCC,4BAAiBH,YADqB,CAAxC;AAGA,QAAMI,uBAAuB,GAAG,2CAAwB,KAAxB,CAAhC,CAbiC,CAejC;;AACA,QAAMC,gBAAgB,GAAG,wBAAaC,GAAD,IAAwB;AAAA;;AAC3D;AACA,QAAIC,YAAY,sDAAGX,aAAa,CAACY,OAAjB,2DAAG,uBAAuBC,EAA1B,yEAAgC,IAAhD;;AAEA,QAAIF,YAAY,KAAKD,GAAG,CAACG,EAAzB,EAA6B;AAC3B,UAAIb,aAAa,CAACY,OAAlB,EAA2B;AACzB;AACAX,QAAAA,qBAAqB,CAACW,OAAtB,GAAgCZ,aAAa,CAACY,OAA9C;AACD,OAJ0B,CAK3B;;;AACAZ,MAAAA,aAAa,CAACY,OAAd,GAAwBF,GAAxB;AACD;AACF,GAZwB,EAYtB,EAZsB,CAAzB;AAcA,QAAMI,mBAAmB,GAAG,wBAAaJ,GAAD,IAAgC;AAAA;;AACtE;AACA,QAAIG,EAAJ;;AACA,QAAI;AACFA,MAAAA,EAAE,GAAG,sCAAgBH,GAAhB,CAAL;AACD,KAFD,CAEE,MAAM;AACN;AACD,KAPqE,CAStE;;;AACA,QAAIC,YAAY,uDAAGX,aAAa,CAACY,OAAjB,2DAAG,uBAAuBC,EAA1B,2EAAgC,IAAhD;AAEA;AACJ;AACA;AACA;AACA;;AACI,QAAIA,EAAE,KAAKF,YAAX,EAAyB;AACvB;AACAX,MAAAA,aAAa,CAACY,OAAd,GAAwBX,qBAAqB,CAACW,OAA9C;AACD;AACF,GArB2B,EAqBzB,EArByB,CAA5B;AAuBA,SAAO;AACLZ,IAAAA,aADK;AAELE,IAAAA,sBAFK;AAGLG,IAAAA,gCAHK;AAILC,IAAAA,+BAJK;AAKLE,IAAAA,uBALK;AAMLC,IAAAA,gBANK;AAOLK,IAAAA;AAPK,GAAP;AASD,CA9DM","sourcesContent":["import { useCallback, RefObject, useRef } from 'react';\nimport { useSharedValue } from 'react-native-reanimated';\nimport { getRefNativeTag } from '../utilities/getRefNativeTag';\nimport { SCROLLABLE_STATE, SCROLLABLE_TYPE } from '../constants';\nimport type { ScrollableRef, Scrollable } from '../types';\n\nexport const useScrollable = () => {\n  // refs\n  const scrollableRef = useRef<ScrollableRef>(null);\n  const previousScrollableRef = useRef<ScrollableRef>(null);\n\n  // variables\n  const animatedScrollableType = useSharedValue<SCROLLABLE_TYPE>(\n    SCROLLABLE_TYPE.UNDETERMINED\n  );\n  const animatedScrollableContentOffsetY = useSharedValue<number>(0);\n  const animatedScrollableOverrideState = useSharedValue<SCROLLABLE_STATE>(\n    SCROLLABLE_STATE.UNDETERMINED\n  );\n  const isScrollableRefreshable = useSharedValue<boolean>(false);\n\n  // callbacks\n  const setScrollableRef = useCallback((ref: ScrollableRef) => {\n    // get current node handle id\n    let currentRefId = scrollableRef.current?.id ?? null;\n\n    if (currentRefId !== ref.id) {\n      if (scrollableRef.current) {\n        // @ts-ignore\n        previousScrollableRef.current = scrollableRef.current;\n      }\n      // @ts-ignore\n      scrollableRef.current = ref;\n    }\n  }, []);\n\n  const removeScrollableRef = useCallback((ref: RefObject<Scrollable>) => {\n    // find node handle id\n    let id;\n    try {\n      id = getRefNativeTag(ref);\n    } catch {\n      return;\n    }\n\n    // get current node handle id\n    let currentRefId = scrollableRef.current?.id ?? null;\n\n    /**\n     * @DEV\n     * when the incoming node is actually the current node, we reset\n     * the current scrollable ref to the previous one.\n     */\n    if (id === currentRefId) {\n      // @ts-ignore\n      scrollableRef.current = previousScrollableRef.current;\n    }\n  }, []);\n\n  return {\n    scrollableRef,\n    animatedScrollableType,\n    animatedScrollableContentOffsetY,\n    animatedScrollableOverrideState,\n    isScrollableRefreshable,\n    setScrollableRef,\n    removeScrollableRef,\n  };\n};\n"]}