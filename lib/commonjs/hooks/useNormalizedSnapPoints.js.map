{"version":3,"sources":["useNormalizedSnapPoints.ts"],"names":["useNormalizedSnapPoints","snapPoints","containerHeight","contentHeight","handleHeight","enableDynamicSizing","maxDynamicContentSize","normalizedSnapPoints","isContainerLayoutReady","value","INITIAL_CONTAINER_HEIGHT","INITIAL_SNAP_POINT","_snapPoints","_normalizedSnapPoints","map","snapPoint","INITIAL_HANDLE_HEIGHT","push","Math","min","undefined","sort","a","b"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMA,uBAAuB,GAAG,CACrCC,UADqC,EAErCC,eAFqC,EAGrCC,aAHqC,EAIrCC,YAJqC,EAKrCC,mBALqC,EAMrCC,qBANqC,KAOlC;AACH,QAAMC,oBAAoB,GAAG,4CAAgB,MAAM;AACjD;AACA,UAAMC,sBAAsB,GAC1BN,eAAe,CAACO,KAAhB,KAA0BC,mCAD5B;;AAEA,QAAI,CAACF,sBAAL,EAA6B;AAC3B,aAAO,CAACG,6BAAD,CAAP;AACD;;AAED,UAAMC,WAAW,GAAGX,UAAU,GAC1B,WAAWA,UAAX,GACEA,UAAU,CAACQ,KADb,GAEER,UAHwB,GAI1B,EAJJ;;AAMA,QAAIY,qBAAqB,GAAGD,WAAW,CAACE,GAAZ,CAAgBC,SAAS,IACnD,mCAAmBA,SAAnB,EAA8Bb,eAAe,CAACO,KAA9C,CAD0B,CAA5B;;AAIA,QAAIJ,mBAAJ,EAAyB;AACvB,UAAID,YAAY,CAACK,KAAb,KAAuBO,gCAA3B,EAAkD;AAChD,eAAO,CAACL,6BAAD,CAAP;AACD;;AAED,UAAIR,aAAa,CAACM,KAAd,KAAwBC,mCAA5B,EAAsD;AACpD,eAAO,CAACC,6BAAD,CAAP;AACD;;AAEDE,MAAAA,qBAAqB,CAACI,IAAtB,CACEf,eAAe,CAACO,KAAhB,GACES,IAAI,CAACC,GAAL,CACEhB,aAAa,CAACM,KAAd,GAAsBL,YAAY,CAACK,KADrC,EAEEH,qBAAqB,KAAKc,SAA1B,GACId,qBADJ,GAEIJ,eAAe,CAACO,KAJtB,CAFJ;;AAUAI,MAAAA,qBAAqB,GAAGA,qBAAqB,CAACQ,IAAtB,CAA2B,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAAC,GAAGD,CAAzC,CAAxB;AACD;;AACD,WAAOT,qBAAP;AACD,GAxC4B,EAwC1B,CAACZ,UAAD,EAAaI,mBAAb,EAAkCC,qBAAlC,CAxC0B,CAA7B;AA0CA,SAAOC,oBAAP;AACD,CAnDM","sourcesContent":["import Animated, { useDerivedValue } from 'react-native-reanimated';\nimport { normalizeSnapPoint } from '../utilities';\nimport type { BottomSheetProps } from '../components/bottomSheet';\nimport {\n  INITIAL_CONTAINER_HEIGHT,\n  INITIAL_HANDLE_HEIGHT,\n  INITIAL_SNAP_POINT,\n} from '../components/bottomSheet/constants';\n\n/**\n * Convert percentage snap points to pixels in screen and calculate\n * the accurate snap points positions.\n * @param snapPoints provided snap points.\n * @param containerHeight BottomSheetContainer height.\n * @param contentHeight content size.\n * @param handleHeight handle size.\n * @param enableDynamicSizing\n * @param maxDynamicContentSize\n * @returns {Animated.SharedValue<number[]>}\n */\nexport const useNormalizedSnapPoints = (\n  snapPoints: BottomSheetProps['snapPoints'],\n  containerHeight: Animated.SharedValue<number>,\n  contentHeight: Animated.SharedValue<number>,\n  handleHeight: Animated.SharedValue<number>,\n  enableDynamicSizing: BottomSheetProps['enableDynamicSizing'],\n  maxDynamicContentSize: BottomSheetProps['maxDynamicContentSize']\n) => {\n  const normalizedSnapPoints = useDerivedValue(() => {\n    // early exit, if container layout is not ready\n    const isContainerLayoutReady =\n      containerHeight.value !== INITIAL_CONTAINER_HEIGHT;\n    if (!isContainerLayoutReady) {\n      return [INITIAL_SNAP_POINT];\n    }\n\n    const _snapPoints = snapPoints\n      ? 'value' in snapPoints\n        ? snapPoints.value\n        : snapPoints\n      : [];\n\n    let _normalizedSnapPoints = _snapPoints.map(snapPoint =>\n      normalizeSnapPoint(snapPoint, containerHeight.value)\n    ) as number[];\n\n    if (enableDynamicSizing) {\n      if (handleHeight.value === INITIAL_HANDLE_HEIGHT) {\n        return [INITIAL_SNAP_POINT];\n      }\n\n      if (contentHeight.value === INITIAL_CONTAINER_HEIGHT) {\n        return [INITIAL_SNAP_POINT];\n      }\n\n      _normalizedSnapPoints.push(\n        containerHeight.value -\n          Math.min(\n            contentHeight.value + handleHeight.value,\n            maxDynamicContentSize !== undefined\n              ? maxDynamicContentSize\n              : containerHeight.value\n          )\n      );\n\n      _normalizedSnapPoints = _normalizedSnapPoints.sort((a, b) => b - a);\n    }\n    return _normalizedSnapPoints;\n  }, [snapPoints, enableDynamicSizing, maxDynamicContentSize]);\n\n  return normalizedSnapPoints;\n};\n"]}