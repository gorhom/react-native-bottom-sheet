{"version":3,"sources":["createBottomSheetScrollableComponent.tsx"],"names":["React","forwardRef","useImperativeHandle","useMemo","useRef","Platform","useAnimatedProps","useAnimatedStyle","NativeViewGestureHandler","BottomSheetDraggableView","BottomSheetRefreshControl","useScrollHandler","useScrollableSetter","useBottomSheetInternal","useStableCallback","GESTURE_SOURCE","SCROLLABLE_DECELERATION_RATE_MAPPER","SCROLLABLE_STATE","styles","createBottomSheetScrollableComponent","type","ScrollableComponent","props","ref","focusHook","scrollEventsHandlersHook","enableFooterMarginAdjustment","overScrollMode","keyboardDismissMode","showsVerticalScrollIndicator","style","refreshing","onRefresh","progressViewOffset","refreshControl","onScroll","onScrollBeginDrag","onScrollEndDrag","onContentSizeChange","rest","nativeGestureRef","refreshControlGestureRef","scrollableRef","scrollableContentOffsetY","scrollHandler","enableContentPanningGesture","animatedFooterHeight","animatedScrollableState","animatedContentHeight","enableDynamicSizing","scrollableAnimatedProps","decelerationRate","value","UNLOCKED","handleContentSizeChange","contentWidth","contentHeight","containerAnimatedStyle","marginBottom","containerStyle","current","undefined","OS","scrollableContent","SCROLLABLE","container"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,mBAA5B,EAAiDC,OAAjD,EAA0DC,MAA1D,QAAwE,OAAxE;AACA,SAASC,QAAT,QAAyB,cAAzB;AACA,SAASC,gBAAT,EAA2BC,gBAA3B,QAAmD,yBAAnD;AACA,SAASC,wBAAT,QAAyC,8BAAzC;AACA,OAAOC,wBAAP,MAAqC,6BAArC;AACA,OAAOC,yBAAP,MAAsC,8BAAtC;AACA,SACEC,gBADF,EAEEC,mBAFF,EAGEC,sBAHF,EAIEC,iBAJF,QAKO,aALP;AAMA,SACEC,cADF,EAEEC,mCAFF,EAGEC,gBAHF,QAKO,iBALP;AAMA,SAASC,MAAT,QAAuB,UAAvB;AAEA,OAAO,SAASC,oCAAT,CACLC,IADK,EAELC,mBAFK,EAGL;AACA,sBAAOpB,UAAU,CAAO,CAACqB,KAAD,EAAQC,GAAR,KAAgB;AACtC;AACA,UAAM;AACJ;AACAC,MAAAA,SAFI;AAGJC,MAAAA,wBAHI;AAIJ;AACAC,MAAAA,4BAA4B,GAAG,KAL3B;AAMJC,MAAAA,cAAc,GAAG,OANb;AAOJC,MAAAA,mBAAmB,GAAG,aAPlB;AAQJC,MAAAA,4BAA4B,GAAG,IAR3B;AASJC,MAAAA,KATI;AAUJC,MAAAA,UAVI;AAWJC,MAAAA,SAXI;AAYJC,MAAAA,kBAZI;AAaJC,MAAAA,cAbI;AAcJ;AACAC,MAAAA,QAfI;AAgBJC,MAAAA,iBAhBI;AAiBJC,MAAAA,eAjBI;AAkBJC,MAAAA,mBAlBI;AAmBJ,SAAGC;AAnBC,QAoBGjB,KApBT,CAFsC,CAwBtC;;AACA,UAAMkB,gBAAgB,GAAGpC,MAAM,CAA2B,IAA3B,CAA/B;AACA,UAAMqC,wBAAwB,GAAGrC,MAAM,CAA2B,IAA3B,CAAvC,CA1BsC,CA2BtC;AAEA;;AACA,UAAM;AAAEsC,MAAAA,aAAF;AAAiBC,MAAAA,wBAAjB;AAA2CC,MAAAA;AAA3C,QACJjC,gBAAgB,CACdc,wBADc,EAEdU,QAFc,EAGdC,iBAHc,EAIdC,eAJc,CADlB;AAOA,UAAM;AACJQ,MAAAA,2BADI;AAEJC,MAAAA,oBAFI;AAGJC,MAAAA,uBAHI;AAIJC,MAAAA,qBAJI;AAKJC,MAAAA;AALI,QAMFpC,sBAAsB,EAN1B,CArCsC,CA4CtC;AAEA;;AACA,UAAMqC,uBAAuB,GAAG5C,gBAAgB,CAC9C,OAAO;AACL6C,MAAAA,gBAAgB,EACdnC,mCAAmC,CAAC+B,uBAAuB,CAACK,KAAzB,CAFhC;AAGLvB,MAAAA,4BAA4B,EAAEA,4BAA4B,GACtDkB,uBAAuB,CAACK,KAAxB,KAAkCnC,gBAAgB,CAACoC,QADG,GAEtDxB;AALC,KAAP,CAD8C,EAQ9C,CAACA,4BAAD,CAR8C,CAAhD,CA/CsC,CAyDtC;AAEA;;AACA,UAAMyB,uBAAuB,GAAGxC,iBAAiB,CAC/C,CAACyC,YAAD,EAAuBC,aAAvB,KAAiD;AAC/C,UAAIP,mBAAJ,EAAyB;AACvBD,QAAAA,qBAAqB,CAACI,KAAtB,GAA8BI,aAA9B;AACD;;AAED,UAAIlB,mBAAJ,EAAyB;AACvBA,QAAAA,mBAAmB,CAACiB,YAAD,EAAeC,aAAf,CAAnB;AACD;AACF,KAT8C,CAAjD,CA5DsC,CAuEtC;AAEA;;AACA,UAAMC,sBAAsB,GAAGlD,gBAAgB,CAC7C,OAAO;AACLmD,MAAAA,YAAY,EAAEhC,4BAA4B,GACtCoB,oBAAoB,CAACM,KADiB,GAEtC;AAHC,KAAP,CAD6C,EAM7C,CAAC1B,4BAAD,CAN6C,CAA/C;AAQA,UAAMiC,cAAc,GAAGxD,OAAO,CAAC,MAAM;AACnC,aAAOuB,4BAA4B,GAC/B,CACE,IAAII,KAAK,GAAI,YAAYA,KAAZ,GAAoBA,KAApB,GAA4B,CAACA,KAAD,CAAhC,GAA2C,EAApD,CADF,EAEE2B,sBAFF,CAD+B,GAK/B3B,KALJ;AAMD,KAP6B,EAO3B,CAACJ,4BAAD,EAA+BI,KAA/B,EAAsC2B,sBAAtC,CAP2B,CAA9B,CAlFsC,CA0FtC;AAEA;AACA;;AACAvD,IAAAA,mBAAmB,CAACqB,GAAD,EAAM,MAAMmB,aAAa,CAACkB,OAA1B,CAAnB;AACAhD,IAAAA,mBAAmB,CACjB8B,aADiB,EAEjBtB,IAFiB,EAGjBuB,wBAHiB,EAIjBX,SAAS,KAAK6B,SAJG,EAKjBrC,SALiB,CAAnB,CA/FsC,CAsGtC;AAEA;;AACA,QAAInB,QAAQ,CAACyD,EAAT,KAAgB,SAApB,EAA+B;AAC7B,YAAMC,iBAAiB,gBACrB,oBAAC,wBAAD;AACE,QAAA,GAAG,EAAEvB,gBADP;AAEE,QAAA,OAAO,EAAEK,2BAFX;AAGE,QAAA,uBAAuB,EAAE;AAH3B,sBAKE,oBAAC,mBAAD;AACE,QAAA,aAAa,EAAEK;AADjB,SAEMX,IAFN;AAGE,QAAA,mBAAmB,EAAE,EAHvB;AAIE,QAAA,GAAG,EAAEG,aAJP;AAKE,QAAA,cAAc,EAAEf,cALlB;AAME,QAAA,mBAAmB,EAAEC,mBANvB;AAOE,QAAA,QAAQ,EAAEgB,aAPZ;AAQE,QAAA,mBAAmB,EAAEU,uBARvB;AASE,QAAA,KAAK,EAAEK;AATT,SALF,CADF;AAmBA,0BACE,oBAAC,wBAAD;AACE,QAAA,gBAAgB,EAAEnB,gBADpB;AAEE,QAAA,wBAAwB,EAAEC,wBAF5B;AAGE,QAAA,WAAW,EAAE1B,cAAc,CAACiD,UAH9B;AAIE,QAAA,KAAK,EAAE9C,MAAM,CAAC+C;AAJhB,SAMGjC,SAAS,gBACR,oBAAC,yBAAD;AACE,QAAA,GAAG,EAAES,wBADP;AAEE,QAAA,UAAU,EAAEV,UAFd;AAGE,QAAA,SAAS,EAAEC,SAHb;AAIE,QAAA,kBAAkB,EAAEC,kBAJtB;AAKE,QAAA,KAAK,EAAEf,MAAM,CAAC+C;AALhB,SAOGF,iBAPH,CADQ,GAWRA,iBAjBJ,CADF;AAsBD;;AACD,wBACE,oBAAC,wBAAD;AACE,MAAA,gBAAgB,EAAEvB,gBADpB;AAEE,MAAA,WAAW,EAAEzB,cAAc,CAACiD,UAF9B;AAGE,MAAA,KAAK,EAAE9C,MAAM,CAAC+C;AAHhB,oBAKE,oBAAC,wBAAD;AACE,MAAA,GAAG,EAAEzB,gBADP;AAEE,MAAA,OAAO,EAAEK,2BAFX;AAGE,MAAA,uBAAuB,EAAE;AAH3B,oBAKE,oBAAC,mBAAD;AACE,MAAA,aAAa,EAAEK;AADjB,OAEMX,IAFN;AAGE,MAAA,mBAAmB,EAAE,EAHvB;AAIE,MAAA,GAAG,EAAEG,aAJP;AAKE,MAAA,cAAc,EAAEf,cALlB;AAME,MAAA,mBAAmB,EAAEC,mBANvB;AAOE,MAAA,UAAU,EAAEG,UAPd;AAQE,MAAA,SAAS,EAAEC,SARb;AASE,MAAA,kBAAkB,EAAEC,kBATtB;AAUE,MAAA,cAAc,EAAEC,cAVlB;AAWE,MAAA,QAAQ,EAAEU,aAXZ;AAYE,MAAA,mBAAmB,EAAEU,uBAZvB;AAaE,MAAA,KAAK,EAAEK;AAbT,OALF,CALF,CADF,CApJsC,CAiLtC;AACD,GAlLgB,CAAjB;AAmLD","sourcesContent":["import React, { forwardRef, useImperativeHandle, useMemo, useRef } from 'react';\nimport { Platform } from 'react-native';\nimport { useAnimatedProps, useAnimatedStyle } from 'react-native-reanimated';\nimport { NativeViewGestureHandler } from 'react-native-gesture-handler';\nimport BottomSheetDraggableView from '../bottomSheetDraggableView';\nimport BottomSheetRefreshControl from '../bottomSheetRefreshControl';\nimport {\n  useScrollHandler,\n  useScrollableSetter,\n  useBottomSheetInternal,\n  useStableCallback,\n} from '../../hooks';\nimport {\n  GESTURE_SOURCE,\n  SCROLLABLE_DECELERATION_RATE_MAPPER,\n  SCROLLABLE_STATE,\n  SCROLLABLE_TYPE,\n} from '../../constants';\nimport { styles } from './styles';\n\nexport function createBottomSheetScrollableComponent<T, P>(\n  type: SCROLLABLE_TYPE,\n  ScrollableComponent: any\n) {\n  return forwardRef<T, P>((props, ref) => {\n    // props\n    const {\n      // hooks\n      focusHook,\n      scrollEventsHandlersHook,\n      // props\n      enableFooterMarginAdjustment = false,\n      overScrollMode = 'never',\n      keyboardDismissMode = 'interactive',\n      showsVerticalScrollIndicator = true,\n      style,\n      refreshing,\n      onRefresh,\n      progressViewOffset,\n      refreshControl,\n      // events\n      onScroll,\n      onScrollBeginDrag,\n      onScrollEndDrag,\n      onContentSizeChange,\n      ...rest\n    }: any = props;\n\n    //#region refs\n    const nativeGestureRef = useRef<NativeViewGestureHandler>(null);\n    const refreshControlGestureRef = useRef<NativeViewGestureHandler>(null);\n    //#endregion\n\n    //#region hooks\n    const { scrollableRef, scrollableContentOffsetY, scrollHandler } =\n      useScrollHandler(\n        scrollEventsHandlersHook,\n        onScroll,\n        onScrollBeginDrag,\n        onScrollEndDrag\n      );\n    const {\n      enableContentPanningGesture,\n      animatedFooterHeight,\n      animatedScrollableState,\n      animatedContentHeight,\n      enableDynamicSizing,\n    } = useBottomSheetInternal();\n    //#endregion\n\n    //#region variables\n    const scrollableAnimatedProps = useAnimatedProps(\n      () => ({\n        decelerationRate:\n          SCROLLABLE_DECELERATION_RATE_MAPPER[animatedScrollableState.value],\n        showsVerticalScrollIndicator: showsVerticalScrollIndicator\n          ? animatedScrollableState.value === SCROLLABLE_STATE.UNLOCKED\n          : showsVerticalScrollIndicator,\n      }),\n      [showsVerticalScrollIndicator]\n    );\n    //#endregion\n\n    //#region callbacks\n    const handleContentSizeChange = useStableCallback(\n      (contentWidth: number, contentHeight: number) => {\n        if (enableDynamicSizing) {\n          animatedContentHeight.value = contentHeight;\n        }\n\n        if (onContentSizeChange) {\n          onContentSizeChange(contentWidth, contentHeight);\n        }\n      }\n    );\n    //#endregion\n\n    //#region styles\n    const containerAnimatedStyle = useAnimatedStyle(\n      () => ({\n        marginBottom: enableFooterMarginAdjustment\n          ? animatedFooterHeight.value\n          : 0,\n      }),\n      [enableFooterMarginAdjustment]\n    );\n    const containerStyle = useMemo(() => {\n      return enableFooterMarginAdjustment\n        ? [\n            ...(style ? ('length' in style ? style : [style]) : []),\n            containerAnimatedStyle,\n          ]\n        : style;\n    }, [enableFooterMarginAdjustment, style, containerAnimatedStyle]);\n    //#endregion\n\n    //#region effects\n    // @ts-ignore\n    useImperativeHandle(ref, () => scrollableRef.current);\n    useScrollableSetter(\n      scrollableRef,\n      type,\n      scrollableContentOffsetY,\n      onRefresh !== undefined,\n      focusHook\n    );\n    //#endregion\n\n    //#region render\n    if (Platform.OS === 'android') {\n      const scrollableContent = (\n        <NativeViewGestureHandler\n          ref={nativeGestureRef}\n          enabled={enableContentPanningGesture}\n          shouldCancelWhenOutside={false}\n        >\n          <ScrollableComponent\n            animatedProps={scrollableAnimatedProps}\n            {...rest}\n            scrollEventThrottle={16}\n            ref={scrollableRef}\n            overScrollMode={overScrollMode}\n            keyboardDismissMode={keyboardDismissMode}\n            onScroll={scrollHandler}\n            onContentSizeChange={handleContentSizeChange}\n            style={containerStyle}\n          />\n        </NativeViewGestureHandler>\n      );\n      return (\n        <BottomSheetDraggableView\n          nativeGestureRef={nativeGestureRef}\n          refreshControlGestureRef={refreshControlGestureRef}\n          gestureType={GESTURE_SOURCE.SCROLLABLE}\n          style={styles.container}\n        >\n          {onRefresh ? (\n            <BottomSheetRefreshControl\n              ref={refreshControlGestureRef}\n              refreshing={refreshing}\n              onRefresh={onRefresh}\n              progressViewOffset={progressViewOffset}\n              style={styles.container}\n            >\n              {scrollableContent}\n            </BottomSheetRefreshControl>\n          ) : (\n            scrollableContent\n          )}\n        </BottomSheetDraggableView>\n      );\n    }\n    return (\n      <BottomSheetDraggableView\n        nativeGestureRef={nativeGestureRef}\n        gestureType={GESTURE_SOURCE.SCROLLABLE}\n        style={styles.container}\n      >\n        <NativeViewGestureHandler\n          ref={nativeGestureRef}\n          enabled={enableContentPanningGesture}\n          shouldCancelWhenOutside={false}\n        >\n          <ScrollableComponent\n            animatedProps={scrollableAnimatedProps}\n            {...rest}\n            scrollEventThrottle={16}\n            ref={scrollableRef}\n            overScrollMode={overScrollMode}\n            keyboardDismissMode={keyboardDismissMode}\n            refreshing={refreshing}\n            onRefresh={onRefresh}\n            progressViewOffset={progressViewOffset}\n            refreshControl={refreshControl}\n            onScroll={scrollHandler}\n            onContentSizeChange={handleContentSizeChange}\n            style={containerStyle}\n          />\n        </NativeViewGestureHandler>\n      </BottomSheetDraggableView>\n    );\n    //#endregion\n  });\n}\n"]}