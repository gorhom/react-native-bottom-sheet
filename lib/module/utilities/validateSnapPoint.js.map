{"version":3,"sources":["validateSnapPoint.ts"],"names":["invariant","validateSnapPoint","snapPoint","includes","Number","split"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,WAAtB;AAEA,OAAO,MAAMC,iBAAiB,GAAIC,SAAD,IAAoB;AACnDF,EAAAA,SAAS,CACP,OAAOE,SAAP,KAAqB,QAArB,IAAiC,OAAOA,SAAP,KAAqB,QAD/C,EAEN,IAAGA,SAAU,mEAFP,CAAT;AAKAF,EAAAA,SAAS,CACP,OAAOE,SAAP,KAAqB,QAArB,IACG,OAAOA,SAAP,KAAqB,QAArB,IAAiCA,SAAS,CAACC,QAAV,CAAmB,GAAnB,CAF7B,EAGN,IAAGD,SAAU,qGAHP,CAAT;AAMAF,EAAAA,SAAS,CACP,OAAOE,SAAP,KAAqB,QAArB,IACG,OAAOA,SAAP,KAAqB,QAArB,IAAiCE,MAAM,CAACF,SAAS,CAACG,KAAV,CAAgB,GAAhB,EAAqB,CAArB,CAAD,CAFnC,EAGN,IAAGH,SAAU,iHAHP,CAAT;AAKD,CAjBM","sourcesContent":["import invariant from 'invariant';\n\nexport const validateSnapPoint = (snapPoint: any) => {\n  invariant(\n    typeof snapPoint === 'number' || typeof snapPoint === 'string',\n    `'${snapPoint}' is not a valid snap point! expected types are string or number.`\n  );\n\n  invariant(\n    typeof snapPoint === 'number' ||\n      (typeof snapPoint === 'string' && snapPoint.includes('%')),\n    `'${snapPoint}' is not a valid percentage snap point! expected percentage snap point must include '%'. e.g. '50%'`\n  );\n\n  invariant(\n    typeof snapPoint === 'number' ||\n      (typeof snapPoint === 'string' && Number(snapPoint.split('%')[0])),\n    `'${snapPoint}' is not a valid percentage snap point! expected percentage snap point must be only numbers and '%'. e.g. '50%'`\n  );\n};\n"]}