{"version":3,"sources":["useBottomSheetDynamicSnapPoints.ts"],"names":["useCallback","useEffect","useDerivedValue","useSharedValue","INITIAL_HANDLE_HEIGHT","INITIAL_SNAP_POINT","useBottomSheetDynamicSnapPoints","initialSnapPoints","animatedContentHeight","animatedHandleHeight","animatedSnapPoints","value","map","contentWithHandleHeight","snapPoint","handleContentLayout","nativeEvent","layout","height","console","warn"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,SAAtB,QAAuC,OAAvC;AACA,SAASC,eAAT,EAA0BC,cAA1B,QAAgD,yBAAhD;AACA,SACEC,qBADF,EAEEC,kBAFF,QAGO,qCAHP;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,+BAA+B,GAC1CC,iBAD6C,IAE1C;AACH;AACA,QAAMC,qBAAqB,GAAGL,cAAc,CAAC,CAAD,CAA5C;AACA,QAAMM,oBAAoB,GAAGN,cAAc,CAACC,qBAAD,CAA3C;AACA,QAAMM,kBAAkB,GAAGR,eAAe,CAAC,MAAM;AAC/C,QACEO,oBAAoB,CAACE,KAArB,KAA+BP,qBAA/B,IACAI,qBAAqB,CAACG,KAAtB,KAAgC,CAFlC,EAGE;AACA,aAAOJ,iBAAiB,CAACK,GAAlB,CAAsB,MAAMP,kBAA5B,CAAP;AACD;;AACD,UAAMQ,uBAAuB,GAC3BL,qBAAqB,CAACG,KAAtB,GAA8BF,oBAAoB,CAACE,KADrD;AAGA,WAAOJ,iBAAiB,CAACK,GAAlB,CAAsBE,SAAS,IACpCA,SAAS,KAAK,gBAAd,GAAiCD,uBAAjC,GAA2DC,SADtD,CAAP;AAGD,GAbyC,EAavC,EAbuC,CAA1C;AAoBA;AACA,QAAMC,mBAAmB,GAAGf,WAAW,CACrC,CAAC;AACCgB,IAAAA,WAAW,EAAE;AACXC,MAAAA,MAAM,EAAE;AAAEC,QAAAA;AAAF;AADG;AADd,GAAD,KAIgC;AAC9BV,IAAAA,qBAAqB,CAACG,KAAtB,GAA8BO,MAA9B;AACD,GAPoC,EAQrC,CAACV,qBAAD,CARqC,CAAvC,CAzBG,CAoCH;;AACAP,EAAAA,SAAS,CAAC,MAAM;AACdkB,IAAAA,OAAO,CAACC,IAAR,CACE,0IADF;AAGD,GAJQ,EAIN,EAJM,CAAT,CArCG,CA0CH;;AACA,SAAO;AACLV,IAAAA,kBADK;AAELD,IAAAA,oBAFK;AAGLD,IAAAA,qBAHK;AAILO,IAAAA;AAJK,GAAP;AAMD,CAnDM","sourcesContent":["import { useCallback, useEffect } from 'react';\nimport { useDerivedValue, useSharedValue } from 'react-native-reanimated';\nimport {\n  INITIAL_HANDLE_HEIGHT,\n  INITIAL_SNAP_POINT,\n} from '../components/bottomSheet/constants';\n\n/**\n * Provides dynamic content height calculating functionalities, by\n * replacing the placeholder `CONTENT_HEIGHT` with calculated layout.\n * @example\n * [0, 'CONTENT_HEIGHT', '100%']\n * @param initialSnapPoints your snap point with content height placeholder.\n * @returns {\n *  - animatedSnapPoints: an animated snap points to be set on `BottomSheet` or `BottomSheetModal`.\n *  - animatedHandleHeight: an animated handle height callback node to be set on `BottomSheet` or `BottomSheetModal`.\n *  - animatedContentHeight: an animated content height callback node to be set on `BottomSheet` or `BottomSheetModal`.\n *  - handleContentLayout: a `onLayout` callback method to be set on `BottomSheetView` component.\n * }\n * @deprecated will be deprecated in the next major release! please use the new introduce prop `enableDynamicSizing`.\n */\nexport const useBottomSheetDynamicSnapPoints = (\n  initialSnapPoints: Array<string | number>\n) => {\n  // variables\n  const animatedContentHeight = useSharedValue(0);\n  const animatedHandleHeight = useSharedValue(INITIAL_HANDLE_HEIGHT);\n  const animatedSnapPoints = useDerivedValue(() => {\n    if (\n      animatedHandleHeight.value === INITIAL_HANDLE_HEIGHT ||\n      animatedContentHeight.value === 0\n    ) {\n      return initialSnapPoints.map(() => INITIAL_SNAP_POINT);\n    }\n    const contentWithHandleHeight =\n      animatedContentHeight.value + animatedHandleHeight.value;\n\n    return initialSnapPoints.map(snapPoint =>\n      snapPoint === 'CONTENT_HEIGHT' ? contentWithHandleHeight : snapPoint\n    );\n  }, []);\n\n  type HandleContentLayoutProps = {\n    nativeEvent: {\n      layout: { height: number };\n    };\n  };\n  // callbacks\n  const handleContentLayout = useCallback(\n    ({\n      nativeEvent: {\n        layout: { height },\n      },\n    }: HandleContentLayoutProps) => {\n      animatedContentHeight.value = height;\n    },\n    [animatedContentHeight]\n  );\n\n  //#region effects\n  useEffect(() => {\n    console.warn(\n      '`useBottomSheetDynamicSnapPoints` will be deprecated in the next major release! please use the new introduce prop `enableDynamicSizing`.'\n    );\n  }, []);\n  //#endregion\n  return {\n    animatedSnapPoints,\n    animatedHandleHeight,\n    animatedContentHeight,\n    handleContentLayout,\n  };\n};\n"]}