{"version":3,"sources":["useScrollable.ts"],"names":["useCallback","useRef","useSharedValue","getRefNativeTag","SCROLLABLE_STATE","SCROLLABLE_TYPE","useScrollable","scrollableRef","previousScrollableRef","animatedScrollableType","UNDETERMINED","animatedScrollableContentOffsetY","animatedScrollableOverrideState","isScrollableRefreshable","setScrollableRef","ref","currentRefId","current","id","removeScrollableRef"],"mappings":"AAAA,SAASA,WAAT,EAAiCC,MAAjC,QAA+C,OAA/C;AACA,SAASC,cAAT,QAA+B,yBAA/B;AACA,SAASC,eAAT,QAAgC,8BAAhC;AACA,SAASC,gBAAT,EAA2BC,eAA3B,QAAkD,cAAlD;AAGA,OAAO,MAAMC,aAAa,GAAG,MAAM;AACjC;AACA,QAAMC,aAAa,GAAGN,MAAM,CAAgB,IAAhB,CAA5B;AACA,QAAMO,qBAAqB,GAAGP,MAAM,CAAgB,IAAhB,CAApC,CAHiC,CAKjC;;AACA,QAAMQ,sBAAsB,GAAGP,cAAc,CAC3CG,eAAe,CAACK,YAD2B,CAA7C;AAGA,QAAMC,gCAAgC,GAAGT,cAAc,CAAS,CAAT,CAAvD;AACA,QAAMU,+BAA+B,GAAGV,cAAc,CACpDE,gBAAgB,CAACM,YADmC,CAAtD;AAGA,QAAMG,uBAAuB,GAAGX,cAAc,CAAU,KAAV,CAA9C,CAbiC,CAejC;;AACA,QAAMY,gBAAgB,GAAGd,WAAW,CAAEe,GAAD,IAAwB;AAAA;;AAC3D;AACA,QAAIC,YAAY,sDAAGT,aAAa,CAACU,OAAjB,2DAAG,uBAAuBC,EAA1B,yEAAgC,IAAhD;;AAEA,QAAIF,YAAY,KAAKD,GAAG,CAACG,EAAzB,EAA6B;AAC3B,UAAIX,aAAa,CAACU,OAAlB,EAA2B;AACzB;AACAT,QAAAA,qBAAqB,CAACS,OAAtB,GAAgCV,aAAa,CAACU,OAA9C;AACD,OAJ0B,CAK3B;;;AACAV,MAAAA,aAAa,CAACU,OAAd,GAAwBF,GAAxB;AACD;AACF,GAZmC,EAYjC,EAZiC,CAApC;AAcA,QAAMI,mBAAmB,GAAGnB,WAAW,CAAEe,GAAD,IAAgC;AAAA;;AACtE;AACA,QAAIG,EAAJ;;AACA,QAAI;AACFA,MAAAA,EAAE,GAAGf,eAAe,CAACY,GAAD,CAApB;AACD,KAFD,CAEE,MAAM;AACN;AACD,KAPqE,CAStE;;;AACA,QAAIC,YAAY,uDAAGT,aAAa,CAACU,OAAjB,2DAAG,uBAAuBC,EAA1B,2EAAgC,IAAhD;AAEA;AACJ;AACA;AACA;AACA;;AACI,QAAIA,EAAE,KAAKF,YAAX,EAAyB;AACvB;AACAT,MAAAA,aAAa,CAACU,OAAd,GAAwBT,qBAAqB,CAACS,OAA9C;AACD;AACF,GArBsC,EAqBpC,EArBoC,CAAvC;AAuBA,SAAO;AACLV,IAAAA,aADK;AAELE,IAAAA,sBAFK;AAGLE,IAAAA,gCAHK;AAILC,IAAAA,+BAJK;AAKLC,IAAAA,uBALK;AAMLC,IAAAA,gBANK;AAOLK,IAAAA;AAPK,GAAP;AASD,CA9DM","sourcesContent":["import { useCallback, RefObject, useRef } from 'react';\nimport { useSharedValue } from 'react-native-reanimated';\nimport { getRefNativeTag } from '../utilities/getRefNativeTag';\nimport { SCROLLABLE_STATE, SCROLLABLE_TYPE } from '../constants';\nimport type { ScrollableRef, Scrollable } from '../types';\n\nexport const useScrollable = () => {\n  // refs\n  const scrollableRef = useRef<ScrollableRef>(null);\n  const previousScrollableRef = useRef<ScrollableRef>(null);\n\n  // variables\n  const animatedScrollableType = useSharedValue<SCROLLABLE_TYPE>(\n    SCROLLABLE_TYPE.UNDETERMINED\n  );\n  const animatedScrollableContentOffsetY = useSharedValue<number>(0);\n  const animatedScrollableOverrideState = useSharedValue<SCROLLABLE_STATE>(\n    SCROLLABLE_STATE.UNDETERMINED\n  );\n  const isScrollableRefreshable = useSharedValue<boolean>(false);\n\n  // callbacks\n  const setScrollableRef = useCallback((ref: ScrollableRef) => {\n    // get current node handle id\n    let currentRefId = scrollableRef.current?.id ?? null;\n\n    if (currentRefId !== ref.id) {\n      if (scrollableRef.current) {\n        // @ts-ignore\n        previousScrollableRef.current = scrollableRef.current;\n      }\n      // @ts-ignore\n      scrollableRef.current = ref;\n    }\n  }, []);\n\n  const removeScrollableRef = useCallback((ref: RefObject<Scrollable>) => {\n    // find node handle id\n    let id;\n    try {\n      id = getRefNativeTag(ref);\n    } catch {\n      return;\n    }\n\n    // get current node handle id\n    let currentRefId = scrollableRef.current?.id ?? null;\n\n    /**\n     * @DEV\n     * when the incoming node is actually the current node, we reset\n     * the current scrollable ref to the previous one.\n     */\n    if (id === currentRefId) {\n      // @ts-ignore\n      scrollableRef.current = previousScrollableRef.current;\n    }\n  }, []);\n\n  return {\n    scrollableRef,\n    animatedScrollableType,\n    animatedScrollableContentOffsetY,\n    animatedScrollableOverrideState,\n    isScrollableRefreshable,\n    setScrollableRef,\n    removeScrollableRef,\n  };\n};\n"]}